{"version":3,"sources":["no-image.jpg","Form.js","Movie.js","NotFound.js","Container.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Form","handleSubmit","e","preventDefault","_this","props","getMovie","input","value","_this2","this","react_default","a","createElement","Fragment","className","onSubmit","type","id","placeholder","ref","Component","Movie","img","movie_item","poster_path","noimage","concat","console","log","title","style","width","src","alt","length","substring","href","NotFound","Container","return_movie_item","movies","src_NotFound","map","movie","src_Movie","key","Navbar","App","state","loading","query","axios","get","then","response","setState","data","results","catch","error","src_Navbar","src_Form","src_Container","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1aed918f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no-image.ad02fd3c.jpg\";","import React, { Component } from \"react\";\n\nclass Form extends Component {\n  handleSubmit = e => {\n    e.preventDefault();\n\n    //alert(\"A name was submitted: \" + this.input.value);\n    this.props.getMovie(this.input.value);\n    this.input.value = \"\";\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"jumbotron jumbotron-fluid container-fluid mt-5 bg-dark\">\n          <div className=\"container-fluid\">\n            <h3 className=\"text-center text-white font-weight-light\">\n              Search For any Movie\n            </h3>\n          </div>\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"form-group\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"exampleCheck1\"\n                placeholder=\"Search Movie....\"\n                ref={input => (this.input = input)}\n              />\n            </div>\n          </form>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nexport default Form;\n","import React from \"react\";\nimport noimage from \"./no-image.jpg\";\n\nfunction Movie(props) {\n  const cardStyle = {\n    width: \"18rem\"\n  };\n  let img;\n  if (props.movie_item.poster_path == null) img = noimage;\n  else img = `https://image.tmdb.org/t/p/w500/${props.movie_item.poster_path}`;\n  console.log(\"props of movie componet\", props.movie_item);\n  console.log(\"Poster of movie componet\", props.movie_item.poster_path);\n  console.log(\"Title of movie componet\", props.movie_item.title);\n  return (\n    <div className=\"col col-lg-4\">\n      <div className=\"card text-center mb-4\" style={cardStyle}>\n        <img src={img} className=\"card-img-top\" alt=\"movie_image\" />\n        <div className=\"card-body\">\n          <h5 className=\"card-title text-center\">\n            {props.movie_item.title.length < 14\n              ? `${props.movie_item.title}`\n              : `${props.movie_item.title.substring(0, 15)}...`}\n          </h5>\n\n          <a href=\"#\" className=\"btn btn-primary mx-auto\">\n            Details\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Movie;\n","import React from \"react\";\nfunction NotFound() {\n  return (\n    <div>\n      <p className=\"text-center lead font-weight-bold text-white\">\n        Sorry No Movies Found!!!\n      </p>\n    </div>\n  );\n}\nexport default NotFound;\n","import React, { Component } from \"react\";\nimport Movie from \"./Movie\";\nimport NotFound from \"./NotFound\";\n\nconst Container = props => {\n  let return_movie_item;\n\n  console.log(\"container prop\", props.movies);\n  console.log(\"container prop length\", props.movies.length);\n  props.movies.length === 0\n    ? (return_movie_item = <NotFound />)\n    : (return_movie_item = props.movies.map(movie => (\n        <Movie movie_item={movie} key={movie.id} />\n      )));\n  return (\n    <div className=\"container\">\n      <div className=\"row\">{return_movie_item}</div>\n    </div>\n  );\n};\n\nexport default Container;\n","import React from \"react\";\n\nfunction Navbar(props) {\n  return (\n    <div>\n      <ul className=\"nav justify-content-start\">\n        <li className=\"nav-item\">\n          <a className=\"nav-link text-white font-weight-bold\" href=\"#\">\n            OMDb Movie Search App\n          </a>\n        </li>\n      </ul>\n    </div>\n  );\n}\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Form from \"./Form\";\nimport Container from \"./Container\";\nimport \"./index.css\";\n\nimport Navbar from \"./Navbar\";\nclass App extends Component {\n  state = {\n    movies: [],\n    loading: true\n  };\n\n//http://www.omdbapi.com/?s=${query}&apikey=${apiKey}&type=movie\n\n  getMovie = query => {\n    axios\n    \n      .get(`https://api.themoviedb.org/3/search/movie?api_key=2afba9f9458a7c12ebe9718f62d54bf5&query=${query}&include_adult=false`)\n      .then(response => {\n        // handle success\n        this.setState({\n          movies: response.data.results,\n          loading: false\n        });\n        console.log(\"state is\", this.state.movies);\n      })\n      .catch(function(error) {\n        // handle error\n        console.log(error);\n      });\n  };\n  componentDidMount() {\n    this.getMovie(\"home\");\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <div className=\"container\">\n          <Form getMovie={this.getMovie} />\n          {this.state.loading ? (\n            <div className=\"loader\">Loading</div>\n          ) : (\n            <Container movies={this.state.movies} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}